// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/service/event.go
//
// Generated by this command:
//
//	mockgen -source=../internal/service/event.go -destination=service/event.go -package=eventServiceMocks
//

// Package eventServiceMocks is a generated GoMock package.
package eventServiceMocks

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/Tel3scop/otus_go/hw12_13_14_15_calendar/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockEventService is a mock of EventService interface.
type MockEventService struct {
	ctrl     *gomock.Controller
	recorder *MockEventServiceMockRecorder
}

// MockEventServiceMockRecorder is the mock recorder for MockEventService.
type MockEventServiceMockRecorder struct {
	mock *MockEventService
}

// NewMockEventService creates a new mock instance.
func NewMockEventService(ctrl *gomock.Controller) *MockEventService {
	mock := &MockEventService{ctrl: ctrl}
	mock.recorder = &MockEventServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventService) EXPECT() *MockEventServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEventService) Create(ctx context.Context, event entity.Event) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, event)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockEventServiceMockRecorder) Create(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEventService)(nil).Create), ctx, event)
}

// Delete mocks base method.
func (m *MockEventService) Delete(ctx context.Context, eventID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, eventID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEventServiceMockRecorder) Delete(ctx, eventID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEventService)(nil).Delete), ctx, eventID)
}

// List mocks base method.
func (m *MockEventService) List(ctx context.Context, date time.Time, period entity.PeriodType) ([]entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, date, period)
	ret0, _ := ret[0].([]entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockEventServiceMockRecorder) List(ctx, date, period any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockEventService)(nil).List), ctx, date, period)
}

// Update mocks base method.
func (m *MockEventService) Update(ctx context.Context, event entity.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockEventServiceMockRecorder) Update(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEventService)(nil).Update), ctx, event)
}
